# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:28:28+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, SecretStr, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class Arn(
    RootModel[
        constr(
            pattern=r'arn:[\w+=/,.@-]+:acm:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:[\w+=/,.@-]+:acm:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*',
        min_length=20,
        max_length=2048,
    )


class CertificateBody(
    RootModel[
        constr(
            pattern=r'-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?',
            min_length=1,
            max_length=32768,
        )
    ]
):
    root: constr(
        pattern=r'-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?',
        min_length=1,
        max_length=32768,
    )


class CertificateBodyBlob(RootModel[constr(min_length=1, max_length=32768)]):
    root: constr(min_length=1, max_length=32768)


class CertificateChain(
    RootModel[
        constr(
            pattern=r'(-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}\u000D?\u000A)*-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?',
            min_length=1,
            max_length=2097152,
        )
    ]
):
    root: constr(
        pattern=r'(-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}\u000D?\u000A)*-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?',
        min_length=1,
        max_length=2097152,
    )


class CertificateChainBlob(RootModel[constr(min_length=1, max_length=2097152)]):
    root: constr(min_length=1, max_length=2097152)


class CertificateStatus(Enum):
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    ISSUED = 'ISSUED'
    INACTIVE = 'INACTIVE'
    EXPIRED = 'EXPIRED'
    VALIDATION_TIMED_OUT = 'VALIDATION_TIMED_OUT'
    REVOKED = 'REVOKED'
    FAILED = 'FAILED'


class CertificateStatuses(RootModel[List[CertificateStatus]]):
    root: List[CertificateStatus]


class CertificateTransparencyLoggingPreference(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class CertificateType(Enum):
    IMPORTED = 'IMPORTED'
    AMAZON_ISSUED = 'AMAZON_ISSUED'
    PRIVATE = 'PRIVATE'


class ConflictException(RootModel[Any]):
    root: Any


class DeleteCertificateRequest(BaseModel):
    CertificateArn: Arn


class DescribeCertificateRequest(BaseModel):
    CertificateArn: Arn


class DomainNameString(
    RootModel[
        constr(
            pattern=r'^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$',
            min_length=1,
            max_length=253,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$',
        min_length=1,
        max_length=253,
    )


class DomainStatus(Enum):
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class DomainValidationOption(BaseModel):
    DomainName: DomainNameString
    ValidationDomain: DomainNameString


class DomainValidationOptionList(RootModel[List[DomainValidationOption]]):
    root: List[DomainValidationOption] = Field(..., max_length=100, min_length=1)


class ExtendedKeyUsageName(Enum):
    TLS_WEB_SERVER_AUTHENTICATION = 'TLS_WEB_SERVER_AUTHENTICATION'
    TLS_WEB_CLIENT_AUTHENTICATION = 'TLS_WEB_CLIENT_AUTHENTICATION'
    CODE_SIGNING = 'CODE_SIGNING'
    EMAIL_PROTECTION = 'EMAIL_PROTECTION'
    TIME_STAMPING = 'TIME_STAMPING'
    OCSP_SIGNING = 'OCSP_SIGNING'
    IPSEC_END_SYSTEM = 'IPSEC_END_SYSTEM'
    IPSEC_TUNNEL = 'IPSEC_TUNNEL'
    IPSEC_USER = 'IPSEC_USER'
    ANY = 'ANY'
    NONE = 'NONE'
    CUSTOM = 'CUSTOM'


class ExtendedKeyUsageNames(RootModel[List[ExtendedKeyUsageName]]):
    root: List[ExtendedKeyUsageName]


class FailureReason(Enum):
    NO_AVAILABLE_CONTACTS = 'NO_AVAILABLE_CONTACTS'
    ADDITIONAL_VERIFICATION_REQUIRED = 'ADDITIONAL_VERIFICATION_REQUIRED'
    DOMAIN_NOT_ALLOWED = 'DOMAIN_NOT_ALLOWED'
    INVALID_PUBLIC_DOMAIN = 'INVALID_PUBLIC_DOMAIN'
    DOMAIN_VALIDATION_DENIED = 'DOMAIN_VALIDATION_DENIED'
    CAA_ERROR = 'CAA_ERROR'
    PCA_LIMIT_EXCEEDED = 'PCA_LIMIT_EXCEEDED'
    PCA_INVALID_ARN = 'PCA_INVALID_ARN'
    PCA_INVALID_STATE = 'PCA_INVALID_STATE'
    PCA_REQUEST_FAILED = 'PCA_REQUEST_FAILED'
    PCA_NAME_CONSTRAINTS_VALIDATION = 'PCA_NAME_CONSTRAINTS_VALIDATION'
    PCA_RESOURCE_NOT_FOUND = 'PCA_RESOURCE_NOT_FOUND'
    PCA_INVALID_ARGS = 'PCA_INVALID_ARGS'
    PCA_INVALID_DURATION = 'PCA_INVALID_DURATION'
    PCA_ACCESS_DENIED = 'PCA_ACCESS_DENIED'
    SLR_NOT_FOUND = 'SLR_NOT_FOUND'
    OTHER = 'OTHER'


class GetCertificateRequest(BaseModel):
    CertificateArn: Arn


class GetCertificateResponse(BaseModel):
    Certificate: Optional[CertificateBody] = None
    CertificateChain_1: Optional[CertificateChain] = Field(
        None, alias='CertificateChain'
    )


class IdempotencyToken(RootModel[constr(pattern=r'\w+', min_length=1, max_length=32)]):
    root: constr(pattern=r'\w+', min_length=1, max_length=32)


class ImportCertificateResponse(BaseModel):
    CertificateArn: Optional[Arn] = None


class InvalidArgsException(RootModel[Any]):
    root: Any


class InvalidArnException(RootModel[Any]):
    root: Any


class InvalidDomainValidationOptionsException(RootModel[Any]):
    root: Any


class InvalidParameterException(RootModel[Any]):
    root: Any


class InvalidStateException(RootModel[Any]):
    root: Any


class InvalidTagException(RootModel[Any]):
    root: Any


class KeyAlgorithm(Enum):
    RSA_1024 = 'RSA_1024'
    RSA_2048 = 'RSA_2048'
    RSA_3072 = 'RSA_3072'
    RSA_4096 = 'RSA_4096'
    EC_prime256v1 = 'EC_prime256v1'
    EC_secp384r1 = 'EC_secp384r1'
    EC_secp521r1 = 'EC_secp521r1'


class KeyAlgorithmList(RootModel[List[KeyAlgorithm]]):
    root: List[KeyAlgorithm]


class KeyUsageName(Enum):
    DIGITAL_SIGNATURE = 'DIGITAL_SIGNATURE'
    NON_REPUDIATION = 'NON_REPUDIATION'
    KEY_ENCIPHERMENT = 'KEY_ENCIPHERMENT'
    DATA_ENCIPHERMENT = 'DATA_ENCIPHERMENT'
    KEY_AGREEMENT = 'KEY_AGREEMENT'
    CERTIFICATE_SIGNING = 'CERTIFICATE_SIGNING'
    CRL_SIGNING = 'CRL_SIGNING'
    ENCIPHER_ONLY = 'ENCIPHER_ONLY'
    DECIPHER_ONLY = 'DECIPHER_ONLY'
    ANY = 'ANY'
    CUSTOM = 'CUSTOM'


class KeyUsageNames(RootModel[List[KeyUsageName]]):
    root: List[KeyUsageName]


class LimitExceededException(RootModel[Any]):
    root: Any


class ListTagsForCertificateRequest(BaseModel):
    CertificateArn: Arn


class MaxItems(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class NextToken(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]*',
            min_length=1,
            max_length=10000,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]*', min_length=1, max_length=10000
    )


class NullableBoolean(RootModel[bool]):
    root: bool


class PassphraseBlob(RootModel[SecretStr]):
    root: SecretStr


class PcaArn(
    RootModel[
        constr(
            pattern=r'arn:[\w+=/,.@-]+:acm-pca:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:[\w+=/,.@-]+:acm-pca:[\w+=/,.@-]*:[0-9]+:[\w+=,.@-]+(/[\w+=,.@-]+)*',
        min_length=20,
        max_length=2048,
    )


class PositiveInteger(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PrivateKey(RootModel[SecretStr]):
    root: SecretStr


class PrivateKeyBlob(RootModel[SecretStr]):
    root: SecretStr


class RecordType(Enum):
    CNAME = 'CNAME'


class RenewCertificateRequest(BaseModel):
    CertificateArn: Arn


class RenewalEligibility(Enum):
    ELIGIBLE = 'ELIGIBLE'
    INELIGIBLE = 'INELIGIBLE'


class RenewalStatus(Enum):
    PENDING_AUTO_RENEWAL = 'PENDING_AUTO_RENEWAL'
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class RequestCertificateResponse(BaseModel):
    CertificateArn: Optional[Arn] = None


class RequestInProgressException(RootModel[Any]):
    root: Any


class ResendValidationEmailRequest(BaseModel):
    CertificateArn: Arn
    Domain: DomainNameString
    ValidationDomain: DomainNameString


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RevocationReason(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    KEY_COMPROMISE = 'KEY_COMPROMISE'
    CA_COMPROMISE = 'CA_COMPROMISE'
    AFFILIATION_CHANGED = 'AFFILIATION_CHANGED'
    SUPERCEDED = 'SUPERCEDED'
    CESSATION_OF_OPERATION = 'CESSATION_OF_OPERATION'
    CERTIFICATE_HOLD = 'CERTIFICATE_HOLD'
    REMOVE_FROM_CRL = 'REMOVE_FROM_CRL'
    PRIVILEGE_WITHDRAWN = 'PRIVILEGE_WITHDRAWN'
    A_A_COMPROMISE = 'A_A_COMPROMISE'


class SortBy(Enum):
    CREATED_AT = 'CREATED_AT'


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class String(RootModel[str]):
    root: str


class TStamp(RootModel[datetime]):
    root: datetime


class TagKey(
    RootModel[
        constr(pattern=r'[\p{L}\p{Z}\p{N}_.:\/=+\-@]*', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'[\p{L}\p{Z}\p{N}_.:\/=+\-@]*', min_length=1, max_length=128)


class TagPolicyException(RootModel[Any]):
    root: Any


class TagValue(
    RootModel[
        constr(pattern=r'[\p{L}\p{Z}\p{N}_.:\/=+\-@]*', min_length=0, max_length=256)
    ]
):
    root: constr(pattern=r'[\p{L}\p{Z}\p{N}_.:\/=+\-@]*', min_length=0, max_length=256)


class ThrottlingException(RootModel[Any]):
    root: Any


class TooManyTagsException(RootModel[Any]):
    root: Any


class ValidationEmailList(RootModel[List[String]]):
    root: List[String]


class ValidationException(RootModel[Any]):
    root: Any


class ValidationMethod(Enum):
    EMAIL = 'EMAIL'
    DNS = 'DNS'


class XAmzTarget(Enum):
    CertificateManager_AddTagsToCertificate = 'CertificateManager.AddTagsToCertificate'


class XAmzTarget1(Enum):
    CertificateManager_DeleteCertificate = 'CertificateManager.DeleteCertificate'


class XAmzTarget2(Enum):
    CertificateManager_DescribeCertificate = 'CertificateManager.DescribeCertificate'


class XAmzTarget3(Enum):
    CertificateManager_ExportCertificate = 'CertificateManager.ExportCertificate'


class XAmzTarget4(Enum):
    CertificateManager_GetAccountConfiguration = (
        'CertificateManager.GetAccountConfiguration'
    )


class XAmzTarget5(Enum):
    CertificateManager_GetCertificate = 'CertificateManager.GetCertificate'


class XAmzTarget6(Enum):
    CertificateManager_ImportCertificate = 'CertificateManager.ImportCertificate'


class XAmzTarget7(Enum):
    CertificateManager_ListCertificates = 'CertificateManager.ListCertificates'


class XAmzTarget8(Enum):
    CertificateManager_ListTagsForCertificate = (
        'CertificateManager.ListTagsForCertificate'
    )


class XAmzTarget9(Enum):
    CertificateManager_PutAccountConfiguration = (
        'CertificateManager.PutAccountConfiguration'
    )


class XAmzTarget10(Enum):
    CertificateManager_RemoveTagsFromCertificate = (
        'CertificateManager.RemoveTagsFromCertificate'
    )


class XAmzTarget11(Enum):
    CertificateManager_RenewCertificate = 'CertificateManager.RenewCertificate'


class XAmzTarget12(Enum):
    CertificateManager_RequestCertificate = 'CertificateManager.RequestCertificate'


class XAmzTarget13(Enum):
    CertificateManager_ResendValidationEmail = (
        'CertificateManager.ResendValidationEmail'
    )


class XAmzTarget14(Enum):
    CertificateManager_UpdateCertificateOptions = (
        'CertificateManager.UpdateCertificateOptions'
    )


class CertificateOptions(BaseModel):
    CertificateTransparencyLoggingPreference_1: Optional[
        CertificateTransparencyLoggingPreference
    ] = Field(None, alias='CertificateTransparencyLoggingPreference')


class DomainList(RootModel[List[DomainNameString]]):
    root: List[DomainNameString] = Field(..., max_length=100, min_length=1)


class ExpiryEventsConfiguration(BaseModel):
    DaysBeforeExpiry: Optional[PositiveInteger] = None


class ExportCertificateRequest(BaseModel):
    CertificateArn: Arn
    Passphrase: PassphraseBlob


class ExportCertificateResponse(BaseModel):
    Certificate: Optional[CertificateBody] = None
    CertificateChain_1: Optional[CertificateChain] = Field(
        None, alias='CertificateChain'
    )
    PrivateKey_1: Optional[PrivateKey] = Field(None, alias='PrivateKey')


class ExtendedKeyUsage(BaseModel):
    Name: Optional[ExtendedKeyUsageName] = None
    OID: Optional[String] = None


class ExtendedKeyUsageFilterList(RootModel[List[ExtendedKeyUsageName]]):
    root: List[ExtendedKeyUsageName]


class ExtendedKeyUsageList(RootModel[List[ExtendedKeyUsage]]):
    root: List[ExtendedKeyUsage]


class GetAccountConfigurationResponse(BaseModel):
    ExpiryEvents: Optional[ExpiryEventsConfiguration] = None


class InUseList(RootModel[List[String]]):
    root: List[String]


class KeyUsage(BaseModel):
    Name: Optional[KeyUsageName] = None


class KeyUsageFilterList(RootModel[List[KeyUsageName]]):
    root: List[KeyUsageName]


class KeyUsageList(RootModel[List[KeyUsage]]):
    root: List[KeyUsage]


class PutAccountConfigurationRequest(BaseModel):
    ExpiryEvents: Optional[ExpiryEventsConfiguration] = None
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')


class ResourceRecord(BaseModel):
    Name: String
    Type: RecordType
    Value: String


class Tag(BaseModel):
    Key: TagKey
    Value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=1)


class UpdateCertificateOptionsRequest(BaseModel):
    CertificateArn: Arn
    Options: CertificateOptions


class AddTagsToCertificateRequest(BaseModel):
    CertificateArn: Arn
    Tags: TagList


class CertificateSummary(BaseModel):
    CertificateArn: Optional[Arn] = None
    CreatedAt: Optional[TStamp] = None
    DomainName: Optional[DomainNameString] = None
    Exported: Optional[NullableBoolean] = None
    ExtendedKeyUsages: Optional[ExtendedKeyUsageNames] = None
    HasAdditionalSubjectAlternativeNames: Optional[NullableBoolean] = None
    ImportedAt: Optional[TStamp] = None
    InUse: Optional[NullableBoolean] = None
    IssuedAt: Optional[TStamp] = None
    KeyAlgorithm_1: Optional[KeyAlgorithm] = Field(None, alias='KeyAlgorithm')
    KeyUsages: Optional[KeyUsageNames] = None
    NotAfter: Optional[TStamp] = None
    NotBefore: Optional[TStamp] = None
    RenewalEligibility_1: Optional[RenewalEligibility] = Field(
        None, alias='RenewalEligibility'
    )
    RevokedAt: Optional[TStamp] = None
    Status: Optional[CertificateStatus] = None
    SubjectAlternativeNameSummaries: Optional[DomainList] = None
    Type: Optional[CertificateType] = None


class CertificateSummaryList(RootModel[List[CertificateSummary]]):
    root: List[CertificateSummary]


class DomainValidation(BaseModel):
    DomainName: DomainNameString
    ResourceRecord_1: Optional[ResourceRecord] = Field(None, alias='ResourceRecord')
    ValidationDomain: Optional[DomainNameString] = None
    ValidationEmails: Optional[ValidationEmailList] = None
    ValidationMethod_1: Optional[ValidationMethod] = Field(
        None, alias='ValidationMethod'
    )
    ValidationStatus: Optional[DomainStatus] = None


class DomainValidationList(RootModel[List[DomainValidation]]):
    root: List[DomainValidation] = Field(..., max_length=1000, min_length=1)


class Filters(BaseModel):
    extendedKeyUsage: Optional[ExtendedKeyUsageFilterList] = None
    keyTypes: Optional[KeyAlgorithmList] = None
    keyUsage: Optional[KeyUsageFilterList] = None


class ImportCertificateRequest(BaseModel):
    Certificate: CertificateBodyBlob
    CertificateArn: Optional[Arn] = None
    CertificateChain: Optional[CertificateChainBlob] = None
    PrivateKey: PrivateKeyBlob
    Tags: Optional[TagList] = None


class ListCertificatesRequest(BaseModel):
    CertificateStatuses_1: Optional[CertificateStatuses] = Field(
        None, alias='CertificateStatuses'
    )
    Includes: Optional[Filters] = None
    MaxItems_1: Optional[MaxItems] = Field(None, alias='MaxItems')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortBy_1: Optional[SortBy] = Field(None, alias='SortBy')
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ListCertificatesResponse(BaseModel):
    CertificateSummaryList_1: Optional[CertificateSummaryList] = Field(
        None, alias='CertificateSummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForCertificateResponse(BaseModel):
    Tags: Optional[TagList] = None


class RemoveTagsFromCertificateRequest(BaseModel):
    CertificateArn: Arn
    Tags: TagList


class RenewalSummary(BaseModel):
    DomainValidationOptions: DomainValidationList
    RenewalStatus_1: RenewalStatus = Field(..., alias='RenewalStatus')
    RenewalStatusReason: Optional[FailureReason] = None
    UpdatedAt: TStamp


class RequestCertificateRequest(BaseModel):
    CertificateAuthorityArn: Optional[PcaArn] = None
    DomainName: DomainNameString
    DomainValidationOptions: Optional[DomainValidationOptionList] = None
    IdempotencyToken_1: Optional[IdempotencyToken] = Field(
        None, alias='IdempotencyToken'
    )
    KeyAlgorithm_1: Optional[KeyAlgorithm] = Field(None, alias='KeyAlgorithm')
    Options: Optional[CertificateOptions] = None
    SubjectAlternativeNames: Optional[DomainList] = None
    Tags: Optional[TagList] = None
    ValidationMethod_1: Optional[ValidationMethod] = Field(
        None, alias='ValidationMethod'
    )


class CertificateDetail(BaseModel):
    CertificateArn: Optional[Arn] = None
    CertificateAuthorityArn: Optional[Arn] = None
    CreatedAt: Optional[TStamp] = None
    DomainName: Optional[DomainNameString] = None
    DomainValidationOptions: Optional[DomainValidationList] = None
    ExtendedKeyUsages: Optional[ExtendedKeyUsageList] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    ImportedAt: Optional[TStamp] = None
    InUseBy: Optional[InUseList] = None
    IssuedAt: Optional[TStamp] = None
    Issuer: Optional[String] = None
    KeyAlgorithm_1: Optional[KeyAlgorithm] = Field(None, alias='KeyAlgorithm')
    KeyUsages: Optional[KeyUsageList] = None
    NotAfter: Optional[TStamp] = None
    NotBefore: Optional[TStamp] = None
    Options: Optional[CertificateOptions] = None
    RenewalEligibility_1: Optional[RenewalEligibility] = Field(
        None, alias='RenewalEligibility'
    )
    RenewalSummary_1: Optional[RenewalSummary] = Field(None, alias='RenewalSummary')
    RevocationReason_1: Optional[RevocationReason] = Field(
        None, alias='RevocationReason'
    )
    RevokedAt: Optional[TStamp] = None
    Serial: Optional[String] = None
    SignatureAlgorithm: Optional[String] = None
    Status: Optional[CertificateStatus] = None
    Subject: Optional[String] = None
    SubjectAlternativeNames: Optional[DomainList] = None
    Type: Optional[CertificateType] = None


class DescribeCertificateResponse(BaseModel):
    Certificate: Optional[CertificateDetail] = None
